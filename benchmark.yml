---
- name: set up build servers
  hosts: hosts
  remote_user: root
  tasks:
   - name: install git and QEMU dependencies
     dnf:
         state: present
         name: [
             'binutils',
             'bluez-libs-devel',
             'brlapi-devel',
             'check-devel',
             'cpp',
             'cyrus-sasl-devel',
             'gcc',
             'git',
             'glusterfs-api-devel',
             'glusterfs-devel',
             'gnutls-devel',
             'gperftools-devel',
             'iasl',
             'kernel-devel',
             'libaio-devel',
             'libattr-devel',
             'libcacard-devel',
             'libcap-devel',
             'libcurl-devel',
             'libgcrypt-devel',
             'libiscsi-devel',
             'libjpeg-devel',
             'libpng-devel',
             'librados2-devel',
             'librbd1-devel',
             'librdmacm-devel',
             'libseccomp-devel',
             'libssh2-devel',
             'libtool',
             'liburing-devel',
             'libusbx-devel',
             'libuuid-devel',
             'lzo-devel',
             'make',
             'ncurses-devel',
             'nss-devel',
             'numactl-devel',
             'pciutils-devel',
             'perl-podlators',
             'pixman-devel',
             'pulseaudio-libs-devel',
             'python',
             'rsync',
             'SDL-devel',
             'spice-protocol',
             'spice-server-devel',
             'systemtap',
             'systemtap-sdt-devel',
             'texi2html',
             'texinfo',
             'usbredir-devel',
             'which',
             'zlib-devel'
         ]
   - name: install libblkio dependencies
     dnf:
         state: present
         name: [
              'meson',
              'rust',
              'cargo',
              'python3-docutils',
              'rustfmt',
              'kcov',
              'clippy',
              'diffutils'
         ]

- name: set up vm
  hosts: hosts
  remote_user: root
  tasks:
   - name: install virt-builder
     dnf:
        state: present
        name: ['guestfs-tools', 'libvirt-daemon']

   - name: configure libvirt QEMU settings
     copy: src=files/qemu.conf-vfio dest=/etc/libvirt/qemu.conf mode=644

   - name: start libvirtd service
     service: name=libvirtd state=reloaded

   - name: create vm image
     shell: virt-builder fedora-36 --quiet --size 16G --output /var/lib/libvirt/images/test.img --format raw --mkdir '/root/.ssh' --chmod '0700:/root/.ssh' --write '/root/.ssh/authorized_keys:{{ lookup("file", "files/authorized_keys") }}' --chmod '0600:/root/.ssh/authorized_keys' --root-password password:linux99 --selinux-relabel creates=/var/lib/libvirt/images/test.img

- name: build QEMU and libblkio
  hosts: hosts
  remote_user: root
  tasks:
   - name: set up QEMU git repo
     git:
       repo=https://gitlab.com/stefanha/qemu.git
       version=libblkio
       dest=/root/stefanha/qemu
       force=yes

   - name: ignore submodules in git-status(1)
     git_config: name=diff.ignoreSubmodules value=all scope=local repo=/root/stefanha/qemu

   - name: set up libblkio git repo
     git:
       repo=https://gitlab.com/libblkio/libblkio.git
       version=v0.0.1
       dest=/root/stefanha/libblkio
       force=yes

   - name: allow path traversal into /root
     file:
       path: /root
       mode: '551'

   - name: install SELinux Python modules
     dnf:
       state: present
       name: ['python3-libselinux']

   - name: set SELinux to permissive mode to avoid having to set contexts on all files
     selinux:
       policy: targeted
       state: permissive

   - name: build libblkio
     shell: meson setup build && meson compile -C build && meson install -C build && ldconfig /usr/local/lib64 chdir=/root/stefanha/libblkio

   - name: build QEMU
     shell: ./configure --target-list=x86_64-softmmu --enable-blkio --enable-linux-io-uring && make -j4 chdir=/root/stefanha/qemu

#- name: put NVMe flash translation later into well-known state
#  hosts : hosts
#  remote_user: root
#  tasks:
#   - name: discard NVMe drive
#     shell: blkdiscard /dev/nvme0n1p1
#   - name: write NVMe drive (first pass)
#     shell: dd if=/dev/urandom of=/dev/nvme0n1p1 oflag=direct bs=2M count=178853
#   - name: write NVMe drive (second pass)
#     shell: dd if=/dev/urandom of=/dev/nvme0n1p1 oflag=direct bs=2M count=178853

#- name: set up vfio-pci
#  hosts: hosts
#  remote_user: root
#  tasks:
#    - name: bind the nvme drive to vfio-pci
#      command: driverctl --nosave set-override 0000:5e:00.0 vfio-pci
#      ignore_errors: yes

- name: start VM
  hosts: hosts
  remote_user: root
  tasks:
   - name: install python3-libvirt
     dnf:
        state: present
        name: 'python3-libvirt'

   - name: define VM
     virt:
       command: define
       xml: "{{ lookup('file', 'files/test-libblkio.xml') }}"

   - name: start VM
     virt:
       name: test
       state: running

   - name: wait for SSH
     wait_for: host=192.168.122.192 port=22 search_regex=SSH state=present timeout=120

- name: set up fio
  hosts: vms
  remote_user: root
  tasks:
   - name: install fio
     dnf: name=fio state=present

- name: run benchmark
  hosts: vms
  remote_user: root
  tasks:
   - name: disable I/O scheduler
     shell: echo -n none > /sys/block/vdb/queue/scheduler
   - name: copy fio job files
     copy: src=files/fio.job dest=/root/fio.job mode=644
   - name: run fio
     shell: rm -rf fio-output && mkdir fio-output && for qd in 1 4 16 64 256; do for i in 1 2 3 4 5; do fio --output-format=json --output fio-output/qd-$qd-run-$i.json --bs=512 --iodepth=$qd fio.job; done; done
   - name: create local results directory
     file:
       path: /tmp/fio-output
       state: directory
       mode: 0755
     delegate_to: localhost
   - name: create local results directory
     file:
       path: /tmp/fio-output/blkio-io_uring
       state: directory
       mode: 0755
     delegate_to: localhost
   - name: install rsync
     dnf:
        state: present
        name: 'rsync'
   - name: collect benchmark results
     synchronize:
       src: fio-output/
       dest: /tmp/fio-output/blkio-io_uring
       delete: yes
       recursive: yes
       mode: pull

- name: stop VM
  hosts: vms
  remote_user: root
  tasks:
   - name: stop QEMU
     command: /sbin/shutdown -t now

- name: wait for VM to stop
  hosts: hosts
  remote_user: root
  tasks:
   - name: wait for VM to stop
     virt:
       name: test
       state: shutdown

#- name: clean up vfio-pci
#  hosts: hosts
#  remote_user: root
#  tasks:
#    - name: unbind the nvme drive to vfio-pci
#      command: driverctl --nosave unset-override 0000:5e:00.0

- name: start VM
  hosts: hosts
  remote_user: root
  tasks:
   - name: define VM
     virt:
       command: define
       xml: "{{ lookup('file', 'files/test-qemu.xml') }}"

   - name: start VM
     virt:
       name: test
       state: running

   - name: wait for SSH
     wait_for: host=192.168.122.192 port=22 search_regex=SSH state=present timeout=120

- name: run benchmark
  hosts: vms
  remote_user: root
  tasks:
   - name: disable I/O scheduler
     shell: echo -n none > /sys/block/vdb/queue/scheduler
   - name: copy fio job files
     copy: src=files/fio.job dest=/root/fio.job mode=644
   - name: run fio
     shell: rm -rf fio-output && mkdir fio-output && for qd in 1 4 16 64 256; do for i in 1 2 3 4 5; do fio --output-format=json --output fio-output/qd-$qd-run-$i.json --bs=512 --iodepth=$qd fio.job; done; done
   - name: create local results directory
     file:
       path: /tmp/fio-output/qemu-io_uring
       state: directory
       mode: 0755
     delegate_to: localhost
   - name: install rsync
     dnf:
        state: present
        name: 'rsync'
   - name: collect benchmark results
     synchronize:
       src: fio-output/
       dest: /tmp/fio-output/qemu-io_uring
       delete: yes
       recursive: yes
       mode: pull

- name: stop VM
  hosts: vms
  remote_user: root
  tasks:
   - name: stop QEMU
     command: /sbin/shutdown -t now

- name: wait for VM to stop
  hosts: hosts
  remote_user: root
  tasks:
   - name: wait for VM to stop
     virt:
       name: test
       state: shutdown
